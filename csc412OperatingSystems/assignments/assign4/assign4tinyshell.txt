Script started on Tue 05 May 2015 08:54:46 PM EDT
]0;jlaske@jlu0: ~/Development/Repos/education/csc412OperatingSystems/assignments/assign4jlaske@jlu0:~/Development/Repos/education/csc412OperatingSystems/assignments/assign4$ ls -la
total 156
drwxrwxr-x 2 jlaske jlaske  4096 May  5 20:54 [0m[01;34m.[0m
drwxrwxr-x 6 jlaske jlaske  4096 Apr 29 21:01 [01;34m..[0m
-rw-r----- 1 jlaske jlaske 20394 Apr 29 21:01 asgn4.docx
-rw-rw-r-- 1 jlaske jlaske  4315 May  5 20:52 assign4cwcode.txt
-rw-rw-r-- 1 jlaske jlaske  4831 May  5 20:38 assign4cw.txt
-rw-rw-r-- 1 jlaske jlaske     0 May  5 20:54 assign4tinyshell.txt
-rwxrwxr-x 1 jlaske jlaske 13463 May  5 20:51 [01;32mcw[0m
-rwxrw-r-- 1 jlaske jlaske  7000 Apr 30 00:55 [01;32mcw1.c[0m
-rwxrw-r-- 1 jlaske jlaske  3027 May  5 20:45 [01;32mcw.c[0m
-rwxrwxr-x 1 jlaske jlaske  8707 May  2 15:33 [01;32mmars[0m
-rwxrw-r-- 1 jlaske jlaske   858 May  2 15:33 [01;32mmars.c[0m
-rwxrwxr-x 1 jlaske jlaske  8904 May  2 21:56 [01;32mnewcat[0m
-rwxrw-r-- 1 jlaske jlaske  1559 May  2 14:34 [01;32mnewcat.c[0m
-rwxrw-r-- 1 jlaske jlaske    87 May  5 20:10 [01;32mtest.txt[0m
-rwxrwxr-x 1 jlaske jlaske 14071 May  5 16:18 [01;32mtinyshell[0m
-rwxrw-r-- 1 jlaske jlaske  4660 May  5 16:59 [01;32mtinyshell.c[0m
-rwxrw-r-- 1 jlaske jlaske    61 Apr 30 00:22 [01;32mtwnle.txt[0m
-rwxrw-r-- 1 jlaske jlaske    54 Apr 30 00:21 [01;32mtwpb.txt[0m
-rwxrwxr-x 1 jlaske jlaske  8708 May  2 15:33 [01;32mworld[0m
-rwxrw-r-- 1 jlaske jlaske   861 May  2 15:32 [01;32mworld.c[0m
]0;jlaske@jlu0: ~/Development/Repos/education/csc412OperatingSystems/assignments/assign4jlaske@jlu0:~/Development/Repos/education/csc412OperatingSystems/assignments/assign4$ ./tinyshell
next command> world 5
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
next command> mars7
Not a valid command
next command> mars 8
Hello Mars!
Hello Mars!
Hello Mars!
Hello Mars!
Hello Mars!
Hello Mars!
Hello Mars!
Hello Mars!
next command> newcat world.c
/******************************************************************************
* Author@ Jason Laske
* Professor Anand
* Date Assigned: 4/23/2015
* Date Due: 5/5/2015
* Date Submitted: 5/5/2015
* Description: Simple program to
* output "Hello World!" n times.
*****************************************************************************/

#include <stdio.h> /*typically in /usr/include*/
#include <stdlib.h>

int main (int argc, char* argv [ ])
/*pass command line arguments from shell;
 argc-number of parameters and argv[]â€”the arguments*/
{
   int count, i;
   if (argc != 2)
   {
      fprintf(stderr, "usage: %s count\n", argv[0]);
/* run as- hello world count*/
      exit (-1);
/*signal error (return other than 0) to shell*/
   }
   else
      count = atoi (argv[1]);

   for ( i = 0; i < count; i++ )
      printf("Hello World!\n");

   return 0;
}
next command> newcat mars.c
/******************************************************************************
* Author@ Jason Laske
* Professor Anand
* Date Assigned: 4/23/2015
* Date Due: 5/5/2015
* Date Submitted: 5/5/2015
* Description:Simple program to
* output "Hello Mars!" n times.
*****************************************************************************/

#include <stdio.h> /*typically in /usr/include*/
#include <stdlib.h>

int main (int argc, char* argv [ ])
/*pass command line arguments from shell;
 argc-numberof parameters and argv[]â€”the arguments*/
{
   int count, i;
   if (argc != 2)
   {
      fprintf(stderr, "usage: %s count\n", argv[0]);
/* run as- hello world count*/
      exit (-1);
/*signal error (return other than 0) to shell*/
   }
   else
      count = atoi (argv[1]);

   for ( i = 0; i < count; i++ )
      printf("Hello Mars!\n");

   return 0;
}

next command> newcat tinyshell.c
/* ******************************************************
 * Author@ Jason Laske 
 * Date Due: 5/5/2015
 * Date Submitted: 5/5/2015
 * Description: tsh - A tiny shell program with only 4
 * built in commands - newcat, world [int argv],
 * mars [int argv] and quit.
 *******************************************************/

/* Headers */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>

/* Defined constants */
#define MAXLINE    1024   /* max line size */
#define MAXARGS     128   /* max args on a command line */

/* Global variables */
extern char **environ;      /* defined in libc */
char prompt[] = "next command> ";    /* command line prompt */
char sbuf[MAXLINE];         /* for composing sprintf messages */
int status;		    /* for returning status from wait */
pid_t pid;		    /* variable for process id's and states*/

/* Function prototypes */

/* eval function */
void eval(char *cmdline);

/* builtin_cmd function */
int builtin_cmd(char **argv);

/* parseline function */
int parseline(const char *cmdline, char **argv); 

/* run_child function */
void run_child(char **argv);


/* Utility Functions*/

void usage(void);
void unix_error(char *msg);
pid_t Fork(void);
void app_error(char *msg);

/*
 * main - The shell's main routine 
 */
int main(int argc, char **argv) 
{
    char c;
    char cmdline[MAXLINE];
    int emit_prompt = 1; /* emit prompt (default) */

    /* Execute the shell's read/eval loop */
    while (1) {

	/* Read command line */
	if (emit_prompt) {
	    printf("%s", prompt);                   
	    fflush(stdout);
	}
	if ((fgets(cmdline, MAXLINE, stdin) == NULL) && ferror(stdin))
	    app_error("fgets error");
	if (feof(stdin)) { /* End of file (ctrl-d) */
	    fflush(stdout);
	    exit(0);
	}

	/* Evaluate the command line */
	eval(cmdline);
	fflush(stdout);
	fflush(stderr);
    } 
    exit(0); /* control never reaches here */
}
  
/* 
 * eval - Evaluate the command line that the user has just typed in
 * 
 * If the user has requested a built-in command (quit, world, mars, newcat)
 * then execute it immediately. Parent waits for the child to terminate.
*/
void eval(char *cmdline) 
{
	char *argv[MAXARGS]; 		// argv for execve() 

	parseline(cmdline, argv);

	if (argv[0] == NULL)
		return; // ignore empty lines 

	if(!builtin_cmd(argv)){ 
		printf("Not a valid command\n");
	}else{
		pid = wait(&status);
	}		
	return;
}

/* 
 * parseline - Parse the command line and build the argv array.
 */
int parseline(const char *cmdline, char **argv) 
{
    static char array[MAXLINE]; /* holds local copy of command line */
    char *buf = array;          /* ptr that traverses command line */
    char *delim;                /* points to first space delimiter */
    int argc;                   /* number of args */
    //int bg;                     /* background job? */

    strcpy(buf, cmdline);
    buf[strlen(buf)-1] = ' ';       /* replace trailing '\n' with space */
    while (*buf && (*buf == ' ')) { /* ignore leading spaces */
	buf++;
    }

    /* Build the argv list */
    argc = 0;
    while ((delim = strchr(buf, ' '))) {
	argv[argc++] = buf;
	*delim = '\0';
	buf = delim + 1;
	while (*buf && (*buf == ' ')) /* ignore spaces */
	       buf++;
    }

    argv[argc] = NULL;
    
    if (argc == 0)  /* ignore blank line */
	return 1;

    return 0;
}

/* 
 * builtin_cmd - If the user has typed a built-in command then execute
 *    it immediately.  
 */
int builtin_cmd(char **argv) 
{
	if(!strcmp(argv[0], "quit")){  /* quit command */
		exit(0);
	}
	if(!strcmp(argv[0], "world")){ /* world command */
		run_child(argv);
		return 1;
	}
	if(!strcmp(argv[0], "mars")){ /* mars command */
		run_child(argv);		
		return 1;
	}
	if(!strcmp(argv[0], "newcat")){ /* newcat command */
		run_child(argv);
		return 1;
	}
	return 0;     		  /* not a builtin command */
}

/*
 * run_child - if child was successfully forked execute the given command
 */
void run_child(char **argv)
{
	if ((pid = Fork()) == 0) { // child runs user job 
		if(execve(argv[0], argv, environ) < 0){
			printf("%s: Command not found.\n", argv[0]);
			exit(0);
		}
	}
}



/*
 * unix_error - unix-style error routine
 */
void unix_error(char *msg)
{
    fprintf(stderr, "%s: %s\n", msg, strerror(errno));
    exit(1);
}

/*
 * Fork - wrapper function for fork
 */
pid_t Fork(void)
{
  pid_t pid;

  if((pid=fork())<0)
    unix_error("Fork error");
  return pid;
}

/*
 * app_error - application-style error routine
 */
void app_error(char *msg)
{
    fprintf(stderr, "%s\n", msg);
    exit(1);
}

next command> newcat newcat.c
/******************************************************************************
* Author@ Jason Laske
* Professor Anand
* Date Assigned: 4/2/2015
* Date Due: 4/12/2015
* Date Submitted: 4/12/2015
* Description: newcat program uses unix system calls to achieve the same
* results of oldcat which utilizes c library functions. Accepts input from
* either standard input or a given file and outputs to standard output.
* Can easily be extended to output to a given file as well.
******************************************************************************/
/**Header Declarations*/
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>

/**Funtion Prototype*/
void filecopy(int ifd, int ofd);

/**Main Function*/
int main(int argc, char *argv[]){

int fd;
char *prog = argv[0];

if(argc == 1){   //if no file specified read from std input
  filecopy(STDIN_FILENO, STDOUT_FILENO);
}else{           // else for each file name given read from 
                 //the file and output to std output
  while(--argc > 0){
     if((fd = open(argv[1], O_RDONLY, 0)) == -1){//reading from the file failed
         fprintf(stderr, "%s: can't open %s\n", prog, argv[1]);
         exit(EXIT_FAILURE);
     }else{
         filecopy(fd, STDOUT_FILENO);
         close(fd);
     }
  }
}
return 0;
}

/** filecopy Function reads each character from the given file
* and outputs to standard output
*/
void filecopy(int ifd, int ofd){
  int n;
  char buf[512];
  while((n = read(ifd, buf, 512)) > 0){
    write(ofd, buf, n);
  }
}

next command> world 34
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
Hello World!
next command> quit
]0;jlaske@jlu0: ~/Development/Repos/education/csc412OperatingSystems/assignments/assign4jlaske@jlu0:~/Development/Repos/education/csc412OperatingSystems/assignments/assign4$ exit

Script done on Tue 05 May 2015 08:56:46 PM EDT
